/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import product.Product;
import validation.Validation;

/**
 *
 * @author Admin
 */
public class ProductManager extends javax.swing.JFrame {

    /**
     * -
     * Creates new form ProductManager
     */
    int count = 0;
    ArrayList<String> CategoryList;
    ArrayList<String> NewCategory;
    ArrayList<Product> ProductList;
    //  ArrayList<Product> newProductList;
    String tmpID = null;
    String selectedCategoryItem;
    private final JPopupMenu popupMenu = new JPopupMenu();
    private JMenuItem item = null;

    public ProductManager() {
        initComponents();

        MyThread t = new MyThread();
        t.start();
        ProductList = new ArrayList<>();
        loadCategory();
        updateCategoryComboBox();
        loadProduct();
        NewCategory = new ArrayList<>();

        createPopupMenu(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        List = new java.awt.List();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnNewCat = new javax.swing.JButton();
        btnSaveCat = new javax.swing.JButton();
        btnDelCat = new javax.swing.JButton();
        combox = new javax.swing.JComboBox<>();
        ID = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        quantity = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        IDerror = new javax.swing.JLabel();
        NameError = new javax.swing.JLabel();
        quanError = new javax.swing.JLabel();
        priceError = new javax.swing.JLabel();
        searchValue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        List.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ListItemStateChanged(evt);
            }
        });
        List.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Category");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Product ID");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Product Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Quantity");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Price");

        btnNew.setForeground(new java.awt.Color(0, 0, 0));
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSave.setForeground(new java.awt.Color(0, 0, 0));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDel.setForeground(new java.awt.Color(0, 0, 0));
        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnNewCat.setForeground(new java.awt.Color(0, 0, 0));
        btnNewCat.setText("New category");
        btnNewCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCatActionPerformed(evt);
            }
        });

        btnSaveCat.setForeground(new java.awt.Color(0, 0, 0));
        btnSaveCat.setText("Save category");
        btnSaveCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCatActionPerformed(evt);
            }
        });

        btnDelCat.setForeground(new java.awt.Color(0, 0, 0));
        btnDelCat.setText("Delete category");
        btnDelCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelCatActionPerformed(evt);
            }
        });

        combox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboxItemStateChanged(evt);
            }
        });
        combox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxActionPerformed(evt);
            }
        });

        ID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                IDFocusLost(evt);
            }
        });
        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });

        name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameFocusLost(evt);
            }
        });

        quantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityFocusLost(evt);
            }
        });

        price.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceFocusLost(evt);
            }
        });

        IDerror.setForeground(new java.awt.Color(255, 0, 102));

        NameError.setForeground(new java.awt.Color(255, 0, 102));
        NameError.setToolTipText("");

        quanError.setForeground(new java.awt.Color(255, 0, 102));

        priceError.setForeground(new java.awt.Color(255, 0, 102));

        searchValue.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel6.setText("Search a product");

        btSearch.setForeground(new java.awt.Color(0, 0, 0));
        btSearch.setText("Search");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(btnDelCat))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNewCat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSaveCat)
                                .addGap(17, 17, 17))
                            .addComponent(List, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(quantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(combox, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ID, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                                            .addComponent(name)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(31, 31, 31)
                                                .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(14, 14, 14)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NameError, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(quanError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IDerror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(113, 113, 113)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(combox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(25, 25, 25)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(21, 21, 21)
                                        .addComponent(IDerror, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NameError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(quanError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(priceError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(225, 225, 225))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(225, 225, 225))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(112, 112, 112))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSaveCat)
                                    .addComponent(btnNewCat))
                                .addGap(46, 46, 46)
                                .addComponent(btnDelCat)
                                .addGap(121, 121, 121))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(List, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Connection getConnection() {
        Connection cn = null;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            String url = "jdbc:sqlserver://localhost:1433;databaseName=Product";
            cn = DriverManager.getConnection(url, "sa", "123456");
            return cn;
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ProductManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cn;
    }
    private void btnNewCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCatActionPerformed
        // TODO add your handling code here:
        Connection cn = getConnection();
        try {
//            String query = "insert into Category(ProductName) values (?) ";
//            PreparedStatement pst = cn.prepareStatement(query);
            String item1;
            while (true) {
                if (checkDuplicate(CategoryList, item1 = JOptionPane.showInputDialog(null))) {
                    break;
                }
            }
            if (item1.equals("")) {
                JOptionPane.showMessageDialog(null, "This inputed is empty");
            } else {
                NewCategory.add(item1);
                List.add(item1);
                JOptionPane.showMessageDialog(null, "add Successfully");
            }
        } catch (HeadlessException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnNewCatActionPerformed

    private void btnSaveCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCatActionPerformed
        // TODO add your handling code here:
        Connection cn = getConnection();
        try {
            NewCategory.forEach((newCategory) -> {
                CategoryList.add(newCategory);
            });
            String query = "insert into Category(ProductName) values (?)";
            PreparedStatement pst = cn.prepareStatement(query);
            for (String productName : NewCategory) {
                pst.setString(1, productName);
                pst.executeUpdate();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            updateCategoryComboBox();
        }
    }//GEN-LAST:event_btnSaveCatActionPerformed

    private void btnDelCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelCatActionPerformed
        // TODO add your handling code here:
        String selectedCat = List.getSelectedItem();
        if (!selectedCat.isEmpty()) {
            Connection cn = getConnection();
            try {
                String query = "delete from Category where ProductName=?";
                PreparedStatement pst = cn.prepareStatement(query);
                pst.setString(1, selectedCat);
                if (!checkDuplicate(NewCategory, selectedCat)) {
                    NewCategory.remove(selectedCat);
                }

                List.removeAll();
                NewCategory.forEach((ProName) -> {
                    List.add(ProName);
                });
                pst.executeUpdate();
                loadCategory();

                String query2 = "delete from Product where ProductName=?";
                PreparedStatement pst2 = cn.prepareStatement(query2);
                pst2.setString(1, selectedCat);
                pst2.executeUpdate();
                DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
                int rowCount = dm.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                    dm.removeRow(i);
                }

            } catch (SQLException e) {
            }

        }
    }//GEN-LAST:event_btnDelCatActionPerformed

    private void ListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ListItemStateChanged
        // TODO add your handling code here:
        selectedCategoryItem = List.getSelectedItem();
        // TODO add your handling code here:
        Connection cn = getConnection();
        ArrayList<Product> thisList = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            model.removeRow(i);
        }
        try {
            String query = "select * from Product where ProductName = ?";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, selectedCategoryItem);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                Product product = new Product();
                product.setProductName(rs.getString("ProName"));
                product.setProductID(rs.getString("ProductId"));
                product.setPrice(rs.getDouble("ProductPrice"));
                product.setQuantity(rs.getInt("ProductQuantity"));
                product.setCategory(rs.getString("ProductName"));
                thisList.add(product);
            }
            Vector header = new Vector();
            Vector data = new Vector();
            header.add("Product ID");
            header.add("Product name");
            header.add("Product quantity");
            header.add("Product price");
            if (thisList.size() > 0) {
                thisList.stream().map((product) -> {
                    Vector row = new Vector();
                    row.add(product.getProductID());
                    row.add(product.getProductName());
                    row.add(product.getQuantity());
                    row.add(product.getPrice());
                    return row;
                }).forEachOrdered((row) -> {
                    data.add(row);
                });
                model.setDataVector(data, header);
            }
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_ListItemStateChanged

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        String proName = name.getText().trim();
        String id = ID.getText().trim();
        int quant = Integer.parseInt(quantity.getText());
        double pric = Double.parseDouble(price.getText());
        Product product = new Product(proName, id, quant, pric);
        ProductList.add(product);
        Connection cn = getConnection();
        try {
            String query = "INSERT INTO Product(ProductName, ProductId, ProName, ProductQuantity,ProductPrice) "
                    + "VALUES (?, ?,?, ?,?)";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, combox.getSelectedItem().toString());
            pst.setString(2, ID.getText().trim());
            pst.setString(3, name.getText().trim());
            pst.setInt(4, Integer.parseInt(quantity.getText().trim()));
            pst.setDouble(5, Double.parseDouble(price.getText().trim()));
            pst.executeUpdate();
            loadProduct();
        } catch (NumberFormatException | SQLException ex) {
        }
        checkProductID(ID.getText());
    }//GEN-LAST:event_btnNewActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int index = jTable1.getSelectedRow();
        if (index >= 0) {
            Product product = searchByID(jTable1.getValueAt(index, 0).toString());
            combox.setSelectedItem(product.getCategory());
            ID.setText(product.getProductID());
            name.setText(product.getProductName());
            quantity.setText("" + product.getQuantity());
            price.setText("" + product.getPrice());
            tmpID = product.getProductID();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here
        Connection cn = getConnection();
        ProductList.forEach((_item) -> {
            if (!Validation.checkDuplicateID(ID.getText(), ProductList)) {
                try {
                    String query = "UPDATE Product "
                            + "SET ProductName = ?, ProductId = ?, ProName = ?, ProductQuantity = ? , ProductPrice = ? "
                            + "WHERE ProductId = ?";
                    PreparedStatement pst = cn.prepareStatement(query);
                    pst.setString(1, combox.getSelectedItem().toString());
                    pst.setString(2, ID.getText().trim());
                    pst.setString(3, name.getText().trim());
                    pst.setInt(4, Integer.parseInt(quantity.getText().trim()));
                    pst.setDouble(5, Double.parseDouble(price.getText().trim()));
                    pst.setString(6, tmpID);
                    pst.executeUpdate();
                    loadProduct();
                } catch (NumberFormatException | SQLException ex) {
                }
            } else {
                try {
                    String query = "Insert into Product(ProductName,ProductID,ProName,ProductQuantity,ProductPrice) values (?,?,?,?,?)";
                    PreparedStatement pst = cn.prepareStatement(query);
                    pst.setString(1, combox.getSelectedItem().toString());
                    pst.setString(2, ID.getText().trim());
                    pst.setString(3, name.getText().trim());
                    pst.setInt(4, Integer.parseInt(quantity.getText().trim()));
                    pst.setDouble(5, Double.parseDouble(price.getText().trim()));
                    pst.executeUpdate();
                    loadProduct();
                } catch (NumberFormatException | SQLException ex) {
                }
            }
        });
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        Connection cn = getConnection();
        try {
            String query = "DELETE FROM Product WHERE ProductId = ?";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, tmpID);
            pst.executeUpdate();
            loadProduct();
        } catch (SQLException ex) {
            Logger.getLogger(ProductManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnDelActionPerformed

    private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
        // TODO add your handling code here:
        count++;
        if (count > 1) {
            checkName(name.getText());
            checkQuan(quantity.getText());
            checkPrice(price.getText());
        }
    }//GEN-LAST:event_IDActionPerformed

    private void IDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IDFocusLost

        checkProductID(ID.getText().trim());
    }//GEN-LAST:event_IDFocusLost

    private void nameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFocusLost
        // TODO add your handling code here:
        checkName(name.getText().trim());
    }//GEN-LAST:event_nameFocusLost

    private void quantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFocusLost
        // TODO add your handling code here:
        checkQuan(quantity.getText().trim());
    }//GEN-LAST:event_quantityFocusLost

    private void priceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFocusLost
        // TODO add your handling code here:
        checkPrice(price.getText().trim());
    }//GEN-LAST:event_priceFocusLost

    private void ListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListActionPerformed

    }//GEN-LAST:event_ListActionPerformed

    private void comboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboxItemStateChanged
        // TODO add your handling code here: 
        Connection cn = getConnection();
        String selected = combox.getSelectedItem().toString();
        ArrayList<Product> thisList = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            model.removeRow(i);
        }
        try {
            String query = "select * from Product where ProductName = ?";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, selected);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                Product product = new Product();
                product.setProductName(rs.getString("ProName"));
                product.setProductID(rs.getString("ProductId"));
                product.setPrice(rs.getDouble("ProductPrice"));
                product.setQuantity(rs.getInt("ProductQuantity"));
                product.setCategory(rs.getString("ProductName"));
                thisList.add(product);
            }
            Vector header = new Vector();
            Vector data = new Vector();
            header.add("Product ID");
            header.add("Product name");
            header.add("Product quantity");
            header.add("Product price");
            if (thisList.size() > 0) {
                thisList.stream().map((product) -> {
                    Vector row = new Vector();
                    row.add(product.getProductID());
                    row.add(product.getProductName());
                    row.add(product.getQuantity());
                    row.add(product.getPrice());
                    return row;
                }).forEachOrdered((row) -> {
                    data.add(row);
                });
                model.setDataVector(data, header);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProductManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        ID.setText("");
        name.setText("");
        quantity.setText("");
        price.setText("");
    }//GEN-LAST:event_comboxItemStateChanged

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        // TODO add your handling code here:
        Connection cn = getConnection();
        String value = searchValue.getText();
        ArrayList<Product> thisList = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            model.removeRow(i);
        }
        try {
            String query = "select * from Product where ProName like ?";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, "%" + value + "%");
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                Product product = new Product();
                product.setProductName(rs.getString("ProName"));
                product.setProductID(rs.getString("ProductId"));
                product.setPrice(rs.getDouble("ProductPrice"));
                product.setQuantity(rs.getInt("ProductQuantity"));
                product.setCategory(rs.getString("ProductName"));
                thisList.add(product);
            }
            Vector header = new Vector();
            Vector data = new Vector();
            header.add("Product ID");
            header.add("Product name");
            header.add("Product quantity");
            header.add("Product price");
            if (thisList.size() > 0) {
                thisList.stream().map((product) -> {
                    Vector row = new Vector();
                    row.add(product.getProductID());
                    row.add(product.getProductName());
                    row.add(product.getQuantity());
                    row.add(product.getPrice());
                    return row;
                }).forEachOrdered((row) -> {
                    data.add(row);
                });
                model.setDataVector(data, header);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProductManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btSearchActionPerformed

    private void comboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ProductManager().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ID;
    private javax.swing.JLabel IDerror;
    private java.awt.List List;
    private javax.swing.JLabel NameError;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDelCat;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNewCat;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveCat;
    private javax.swing.JComboBox<String> combox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField price;
    private javax.swing.JLabel priceError;
    private javax.swing.JLabel quanError;
    private javax.swing.JTextField quantity;
    private javax.swing.JTextField searchValue;
    // End of variables declaration//GEN-END:variables

    private void loadCategory() {
        CategoryList = new ArrayList<>();
        Connection cn = getConnection();
        try {
            String query = "select * from Category";
            Statement stm = cn.createStatement();
            ResultSet rs = stm.executeQuery(query);
            while (rs.next()) {
                CategoryList.add(rs.getString("ProductName"));
                List.add(rs.getString("ProductName"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ProductManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean checkDuplicate(ArrayList<String> list, String name) {
        if (name != null) {
            if (!list.stream().noneMatch((string) -> (name.equals(string)))) {
                return false;
            }

        }
        return true;
    }

    private void loadProduct() {

        Connection cn = getConnection();
        ProductList = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            String query = "select * from Product";
            Statement stm = cn.createStatement();
            ResultSet rs = stm.executeQuery(query);
            while (rs.next()) {
                Product product = new Product();
                product.setProductName(rs.getString("ProName"));
                product.setProductID(rs.getString("ProductId"));
                product.setPrice(rs.getDouble("ProductPrice"));
                product.setQuantity(rs.getInt("ProductQuantity"));
                product.setCategory(rs.getString("ProductName"));
                ProductList.add(product);
            }
            Vector header = new Vector();
            Vector data = new Vector();
            header.add("Product ID");
            header.add("Product name");
            header.add("Product quantity");
            header.add("Product price");
            if (ProductList.size() > 0) {
                ProductList.stream().map((product) -> {
                    Vector row = new Vector();
                    row.add(product.getProductID());
                    row.add(product.getProductName());
                    row.add(product.getQuantity());
                    row.add(product.getPrice());
                    return row;
                }).forEachOrdered((row) -> {
                    data.add(row);
                });
                model = (DefaultTableModel) jTable1.getModel();
                model.setDataVector(data, header);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ProductManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateCategoryComboBox() {
        combox.removeAllItems();
        CategoryList.forEach((category) -> {
            combox.addItem(category);
        });
    }

    private Product searchByID(String id) {
        for (Product product : ProductList) {
            if (id.equalsIgnoreCase(product.getProductID())) {
                return product;
            }
        }
        return null;
    }

    private void createPopupMenu(JFrame frame) {
        item = new JMenuItem("Save as new item");
        item.getAccessibleContext().setAccessibleDescription("Save as new item");
        item.addActionListener((ActionEvent e) -> {
        });
        popupMenu.add(item);
        item = new JMenuItem("Update selected item in table");
        item.getAccessibleContext().setAccessibleDescription("Update selected item in table");
        item.addActionListener((ActionEvent e) -> {
        });
        popupMenu.add(item);
    }

    private void checkName(String text) {
        if (text.isEmpty()) {
            NameError.setText("This field must be filled!!!");
        } else {
            NameError.setText("");
        }
    }

    private void checkQuan(String text) {
        if (text.isEmpty()) {
            quanError.setText("This field must be filled!!!");
        } else if (Validation.checkInputInt(text) < 0) {
            quanError.setText("Must be a positive number!!!");
        } else {
            quanError.setText("");
        }
    }

    private void checkPrice(String text) {
        if (text.isEmpty()) {
            priceError.setText("This field must be filled!!!");
        } else if (Validation.checkInputDouble(text) < 0) {
            priceError.setText("Must be a positive number!!!");
        } else {
            priceError.setText("");
        }
    }

    private void checkProductID(String ID) {
        if (ID.isEmpty()) {
            IDerror.setText("This field must be filled!!!");
        }
        if (!Validation.checkDuplicateID(ID, ProductList)) {
            IDerror.setText("This ID has already existed!!!");
        } else {
            IDerror.setText("");
        }
    }

    boolean checkNull() {
        try {
            return !(name.getText().isEmpty() || quantity.getText().isEmpty() || price.getText().isEmpty() || ID.getText().isEmpty());
        } catch (NullPointerException e) {
            return false;
        }
    }

    boolean checkNoError() {
        return !(!NameError.getText().isEmpty() || !IDerror.getText().isEmpty() || !quanError.getText().isEmpty() || !priceError.getText().isEmpty());
    }

    class MyThread extends Thread {

        @Override
        public void run() {
            while (true) {
                if (checkNull() && checkNoError()) {
                    btnNew.setEnabled(true);
                } else {
                    btnNew.setEnabled(false);
                }

            }
        }

    }
}
